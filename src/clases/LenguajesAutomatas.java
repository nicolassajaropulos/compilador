/* LenguajesAutomatas.java */
/* Generated By:JavaCC: Do not edit this line. LenguajesAutomatas.java */
package clases;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Enumeration;
import java.util.Hashtable;

public class LenguajesAutomatas implements LenguajesAutomatasConstants {

    public static Hashtable<Token, Hashtable> ST = new Hashtable();

    public static void main(String args []) throws ParseException {
        try {
            File file = new File("src/clases/prueba.txt");
            FileInputStream fis = new FileInputStream(file);
            LenguajesAutomatas analizador = new LenguajesAutomatas(fis);
            analizador.compile();
            System.out.println("");
            System.out.printf("%s\u005ct%s\u005cn------------------------------------------------------------------\u005cn", "TYPE", "IDENTIFIER VALUE");
            Enumeration e = ST.keys();
            Object clave;
            Object valor;
            while (e.hasMoreElements()) {
                clave = e.nextElement();
                valor = ST.get(clave);
                System.out.printf("%s\u005ct%s\u005cn", clave, valor);
            }
        } catch (ParseException e) {
                System.err.println("Se encontraron errores en el analisis\u005cn" + e.getMessage());
        } catch (FileNotFoundException e) {
                System.err.println(e.getMessage());
        }
    }

/* DECLARATION SYNTAX */
  static final public 
void classDeclaration() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MODIFIER:{
      modifier();
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(CLASS);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(13);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TYPE:
      case MODIFIER:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      fieldDeclaration();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      ifStatement();
    }
    jj_consume_token(14);
  }

  static final public void fieldDeclaration() throws ParseException {
    variableDeclaration();
    jj_consume_token(15);
  }

  static final public void variableDeclaration() throws ParseException {Token t;
    Hashtable h;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MODIFIER:{
      modifier();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    t = type();
    h = variableDeclarator();
ST.put(t, h);
  }

  static final public Hashtable variableDeclarator() throws ParseException {Token id, literal;
    Hashtable<Token, Token> h = new Hashtable();
    id = jj_consume_token(IDENTIFIER);
    jj_consume_token(16);
    literal = literal();
h.put(id, literal); {if ("" != null) return h;}
    throw new Error("Missing return statement in function");
  }

/* STATEMENTS */
  static final public 
void ifStatement() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(17);
    expression();
    jj_consume_token(18);
    statement();
  }

  static final public void statement() throws ParseException {
    jj_consume_token(13);
    aritmeticaExpression();
    jj_consume_token(14);
  }

/* EXPRESSION */
  static final public 
void expression() throws ParseException {
    testingExpression();
  }

  static final public void testingExpression() throws ParseException {
    comparator();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 19:{
      jj_consume_token(19);
      break;
      }
    case 20:{
      jj_consume_token(20);
      break;
      }
    case 21:{
      jj_consume_token(21);
      break;
      }
    case 22:{
      jj_consume_token(22);
      break;
      }
    case 23:{
      jj_consume_token(23);
      break;
      }
    case 24:{
      jj_consume_token(24);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    comparator();
  }

  static final public void aritmeticaExpression() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(16);
    integerLiteral();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 25:{
      jj_consume_token(25);
      break;
      }
    case 26:{
      jj_consume_token(26);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    integerLiteral();
    jj_consume_token(15);
  }

  static final public void comparator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:{
      jj_consume_token(INTEGER_LITERAL);
      break;
      }
    case IDENTIFIER:{
      jj_consume_token(IDENTIFIER);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public Token literal() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:{
      t = jj_consume_token(INTEGER_LITERAL);
      break;
      }
    case BOOLEAN_LITERAL:{
      t = jj_consume_token(BOOLEAN_LITERAL);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public void integerLiteral() throws ParseException {
    jj_consume_token(INTEGER_LITERAL);
  }

  static final public void modifier() throws ParseException {
    jj_consume_token(MODIFIER);
  }

  static final public Token type() throws ParseException {Token t;
    t = jj_consume_token(TYPE);
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public void compile() throws ParseException {
    classDeclaration();
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public LenguajesAutomatasTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200,0x300,0x80,0x200,0x1f80000,0x6000000,0x1400,0xc00,};
   }

  /** Constructor with InputStream. */
  public LenguajesAutomatas(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public LenguajesAutomatas(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LenguajesAutomatasTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public LenguajesAutomatas(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LenguajesAutomatasTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public LenguajesAutomatas(LenguajesAutomatasTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LenguajesAutomatasTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[27];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 27; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
